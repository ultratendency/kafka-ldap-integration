buildscript {
    ext.kafka_version = '2.6.1'
    ext.scala_version = '2.13'
    ext.kotlin_version = '1.7.10'
    ext.unboundid_version = '4.0.9'
    ext.caffeine_version = '3.1.1'
    ext.jackson_version = '2.13.3'
    ext.spek_version = '2.0.18'
    ext.kluent_version = '1.68'
    ext.slf4j_version = '1.7.36'
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id 'org.jmailen.kotlinter' version '3.0.0'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
}

group 'com.ultratendency.kafka.ldap'
version '1.1.0-SNAPSHOT'

sourceCompatibility = 11

test { useJUnitPlatform { includeEngines 'spek2' } }

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.unboundid:unboundid-ldapsdk:$unboundid_version"

    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"

    implementation "org.apache.kafka:kafka_$scala_version:$kafka_version"
    implementation "com.github.ben-manes.caffeine:caffeine:$caffeine_version"
    
    testImplementation "org.amshove.kluent:kluent:$kluent_version"
    testImplementation ("org.spekframework.spek2:spek-dsl-jvm:$spek_version")  {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly ("org.spekframework.spek2:spek-runner-junit5:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }

    testRuntimeOnly "org.slf4j:slf4j-jdk14:$slf4j_version"
}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    testLogging.events("passed", "skipped", "failed")
}

shadowJar {
    baseName = "${project.name}-$scala_version-$kafka_version"
    classifier = null

    dependencies {
        exclude(dependency('org.apache.kafka::'))
        exclude(dependency('com.fasterxml.jackson.core:jackson-databind:'))
        exclude(dependency('org.lz4::'))
        exclude(dependency('org.xerial.snappy::'))
        exclude(dependency('org.slf4j::'))
        exclude(dependency('com.yammer.metrics::'))
        exclude(dependency('com.101tec::'))
        exclude(dependency('org.apache.zookeeper::'))
        exclude(dependency('log4j::'))
        exclude(dependency('net.sf.jopt-simple::'))
        exclude(dependency('org.scala-lang::'))
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
        gpr(MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ultratendency/kafka-ldap-integration")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "ultratendency_kafka-ldap-integration"
        property "sonar.organization", "ultratendency"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.jacoco.xmlReportPaths',
            "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task copyJarToKafka(type: Copy) {
    from findProperty("kafkaJARSrc") ?: ''
    into findProperty("kafkaJARDest") ?: ''
}
