buildscript {
    ext.kafka_version = '4.0.0'
    ext.scala_version = '2.13'
    ext.kotlin_version = '2.1.21'
    ext.unboundid_version = '7.0.2'
    ext.caffeine_version = '3.2.0'
    ext.jackson_version = '2.19.0'
    ext.spek_version = '2.0.19'
    ext.kluent_version = '1.73'
    ext.kotlinter_version = '5.0.2'
    ext.shadow_version = '8.1.1'
    ext.versions_version = '0.52.0'
    ext.sonarqube_version = '6.1.0.5360'
    ext.slf4j_version = '2.0.17'
    ext.junit_version = '5.12.2'
    ext.junit_platform_launcher_version = '1.12.2'

    ext.org_jetbrains_kotlin = 'org.jetbrains.kotlin'
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'org.jmailen.kotlinter' version "$kotlinter_version"
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version "$shadow_version"
    id 'com.github.ben-manes.versions' version "$versions_version"
    id 'org.sonarqube' version "$sonarqube_version"
    id 'jacoco'
    id 'java'
}

group 'com.ultratendency.kafka.ldap'
version '3.0.0' // x-release-please-version

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.unboundid:unboundid-ldapsdk:$unboundid_version"

    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"

    implementation "org.apache.kafka:kafka_$scala_version:$kafka_version"
    implementation "com.github.ben-manes.caffeine:caffeine:$caffeine_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    testImplementation "org.amshove.kluent:kluent:$kluent_version"
    testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spek_version")  {
        exclude group: "$org_jetbrains_kotlin"
    }
    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spek_version") {
        exclude group: "$org_jetbrains_kotlin"
    }
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_version"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junit_platform_launcher_version"
}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_21.toString()
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_21.toString()
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}



shadowJar {
    archiveBaseName = "${project.name}-$scala_version-$kafka_version"

    dependencies {
        exclude(dependency('org.apache.kafka::'))
        exclude(dependency('com.fasterxml.jackson.core:jackson-databind:'))
        exclude(dependency('org.lz4::'))
        exclude(dependency('org.xerial.snappy::'))
        exclude(dependency('org.slf4j::'))
        exclude(dependency('com.yammer.metrics::'))
        exclude(dependency('com.101tec::'))
        exclude(dependency('org.apache.zookeeper::'))
        exclude(dependency('log4j::'))
        exclude(dependency('net.sf.jopt-simple::'))
        exclude(dependency('org.scala-lang::'))
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/ultratendency/kafka-ldap-integration')
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('USERNAME')
                password = project.findProperty('gpr.key') ?: System.getenv('TOKEN')
            }
        }
    }
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'ultratendency_kafka-ldap-integration'
        property 'sonar.organization', 'ultratendency'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.coverage.jacoco.xmlReportPaths',
            "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property 'sonar.gradle.skipCompile', true
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

task copyJarToKafka(type: Copy) {
    from findProperty('kafkaJARSrc') ?: ''
    into findProperty('kafkaJARDest') ?: ''
}
